"""add_user_table

Revision ID: c2b113c31e31
Revises: 
Create Date: 2025-06-18 07:34:31.313389

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c2b113c31e31'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('company',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('terramomodule',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_consultant_exclusive', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('companymoduleaccess',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('reporting_year', sa.Integer(), nullable=False),
    sa.Column('is_purchased', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('company_id', sa.Uuid(), nullable=False),
    sa.Column('terramo_module_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
    sa.ForeignKeyConstraint(['terramo_module_id'], ['terramomodule.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(length=12), nullable=True),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('first_name', sqlmodel.sql.sqltypes.AutoString(length=30), nullable=False),
    sa.Column('middle_name', sqlmodel.sql.sqltypes.AutoString(length=30), nullable=True),
    sa.Column('last_name', sqlmodel.sql.sqltypes.AutoString(length=30), nullable=False),
    sa.Column('id_no', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superadmin', sa.Boolean(), nullable=False),
    sa.Column('is_consultant', sa.Boolean(), nullable=False),
    sa.Column('is_decision_maker', sa.Boolean(), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('security_question', sa.Enum('MOTHER_MAIDEN_NAME', 'CHILDHOOD_FRIEND', 'FAVORITE_COLOR', 'BIRTH_CITY', name='securityquestionsschema'), nullable=False),
    sa.Column('security_answer', sqlmodel.sql.sqltypes.AutoString(length=30), nullable=False),
    sa.Column('account_status', sa.Enum('ACTIVE', 'INACTIVE', 'LOCKED', 'PENDING', name='accountstatusschema'), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('failed_login_attempts', sa.SMALLINT(), nullable=False),
    sa.Column('last_failed_login', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('otp', sqlmodel.sql.sqltypes.AutoString(length=6), nullable=False),
    sa.Column('otp_expiry_time', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('company_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id_no'),
    sa.UniqueConstraint('username')
    )
    op.create_index(op.f('ix_user_company_id'), 'user', ['company_id'], unique=False)
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_table('country',
    sa.Column('country_name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('country_iso_code', sqlmodel.sql.sqltypes.AutoString(length=3), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('country_created_by', sa.Uuid(), nullable=False),
    sa.Column('country_updated_by', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['country_created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['country_updated_by'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('country_name')
    )
    op.create_table('profile',
    sa.Column('title', sa.Enum('Mr', 'Mrs', 'Miss', name='salutationenum'), nullable=False),
    sa.Column('gender', sa.Enum('Male', 'Female', 'Other', name='genderenum'), nullable=False),
    sa.Column('date_of_birth', sa.Date(), nullable=False),
    sa.Column('country_of_birth', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('place_of_birth', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('marital_status', sa.Enum('Married', 'Divorced', 'Single', 'Widowed', name='maritalstatusenum'), nullable=False),
    sa.Column('means_of_identification', sa.Enum('Passport', 'Drivers_License', 'National_ID', name='identificationtypeenum'), nullable=False),
    sa.Column('id_issue_date', sa.Date(), nullable=False),
    sa.Column('id_expiry_date', sa.Date(), nullable=False),
    sa.Column('passport_number', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('nationality', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('phone_number', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('address', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('city', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('country', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('employment_status', sa.Enum('Employed', 'Unemployed', 'Self_Employed', 'Student', 'Retired', name='employmentstatusenum'), nullable=False),
    sa.Column('employer_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('employer_address', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('employer_city', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('employer_country', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('annual_income', sa.Float(), nullable=False),
    sa.Column('date_of_employment', sa.Date(), nullable=False),
    sa.Column('profile_photo_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id_photo_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('signature_photo_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('profile')
    op.drop_table('country')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_index(op.f('ix_user_company_id'), table_name='user')
    op.drop_table('user')
    op.drop_table('companymoduleaccess')
    op.drop_table('terramomodule')
    op.drop_table('company')
    # ### end Alembic commands ###
